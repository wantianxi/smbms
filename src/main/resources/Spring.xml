<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">


    <!--    开启扫描：配置扫描包路经-->
    <context:component-scan base-package="com.smbms.service"/>
    <!--    启用对于@Aspectj AOP注解的支持-->
<!--    <aop:aspectj-autoproxy/>-->


    <!--    1.1 数据源的配置-->
    <!--引入 PropertyPlaceholderConfigurer    -->
    <!--引入properties文件-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:db.properties</value>
        </property>
    </bean>


    <!--1 c3p0数据源的配置-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${driver}"></property>
        <property name="jdbcUrl" value="${url}"></property>
        <property name="user" value="${username}"></property>
        <property name="password" value="${password}"></property>
    </bean>



    <!--1.2 SqlSessionFactoryBean配置,提供SqlSession对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--  使用多级目录用classpath*,否则mapper无法绑定-->
        <property name="mapperLocations" value="classpath*:Mapper/*Mappers.xml"></property>
    </bean>

    <!-- 1.3 SqlSessionTemplate负责管理SqlSession-->
    <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"></constructor-arg>
    </bean>




<!--1.4 配置Mapper实现-->



<!--    &lt;!&ndash;    方法2：使用MapperFactoryBean根据指定Mapper接口生成Mapper实例（不推荐）&ndash;&gt;-->
<!--    &lt;!&ndash;    SQL映射文件namespace与Mapper的类路径相同, 该映射文件可以自动被MapperFactoryBean解析创建Mapper实例&ndash;&gt;-->
<!--    <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
<!--        <property name="mapperInterface" value="com.smbms.mapper.UserMappers"></property>-->
<!--        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>-->
<!--    </bean>-->

<!--    方法3：使用 MapperScannerConfigurer根据指定包批量扫描Mapper接口并生成实例（推荐）-->

    <!--    MapperScannerConfigurer递归扫描基准包下所有接口，若它们在SQL映射文件中定义过，-->
    <!--    则动态注册为MapperFactoryBean，如此即可批量产生映射器实现类。-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.smbms.mapper"></property>
    </bean>



    <!--    定义事务管理-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!--2.  第一种 注解 配置事务属性    -->
<!--    <tx:annotation-driven transaction-manager="txManager"/>-->


    <!-- 2.  第二种 配置事务属性 -->
    <!--<tx:advice>元素声明事务通知-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!-- 根据方法名指定事务的属性 -->
            <tx:method name="*" rollback-for="java.io.IOException"/>
            <!--propagation配置事务传播行为-->
            <tx:method name="purchase" propagation="REQUIRES_NEW"/>
            <!--isolation配置事务的隔离级别-->
            <tx:method name="update*" isolation="SERIALIZABLE"/>
            <!--rollback-for配置事务遇到异常必须回滚，no-rollback-for配置事务遇到异常必须不能回滚-->

            <!-- no-rollback-for="com.dmsd.spring.tx.BookStockException"-->

            <tx:method name="add*" rollback-for="java.io.IOException" />
            <!--read-only配置事务只读属性-->
            <tx:method name="find*" read-only="true"/>
            <!--timeout配置事务的超时属性-->
            <tx:method name="get*" timeout="3"/>
        </tx:attributes>
    </tx:advice>

    <!-- 3. 配置事务切入点, 以及把事务切入点和事务属性关联起来 -->
    <aop:config>
        <aop:pointcut expression="execution(* com.smbms.service.*.*(..))"
                      id="txPointCut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>











</beans>